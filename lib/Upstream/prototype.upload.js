/**
 * Module dependencies
 */

var log = require('../logger');
var buildOrNormalizeReceiver = require('./build-or-normalize-receiver');



/**
 * upload()
 *
 * Convenience method to pipe to a write stream
 * and provide a traditional node callback.
 *
 * Usage:
 *
 * ```
 * .upload(receiver, cb)
 * .upload(receiver)
 * .upload(cb)
 * .upload("filename.jpg")
 * ```
 *
 * @param  {stream.Writable}   receiver__
 * @param  {Function} cb
 * @return {Upstream}
 * @this {Upstream}
 * @api public
 * @chainable
 */

module.exports = function upload (receiver__, cb) {
  var USAGE = '.upload([receiver] [,callback])';
  var self = this;

  // If first parameter is the callback-function not a `receiver__`
  if (!cb && typeof receiver__ === 'function') {
    cb = receiver__;
    receiver__ = undefined;
  }

  // Locate, normalize, and/or build a receiver instance using the value passed in
  // as the first argument (`receiver__`)
  try { receiver__ = buildOrNormalizeReceiver(receiver__); }
  catch (e) {
    if (typeof cb === 'function') return cb(e);
    throw e;
  }

  // For convenience, pump progress events from the receiver
  // to this upstream.  This allows for interchangable, chainable
  // usage, e.g. `req.file().upload(...).on('progress', ...)`
  receiver__.on('progress', function(milestone) {
    self.emit('progress', milestone);
  });

  // Write stream finished successfully!
  receiver__.once('finish', function allFilesUploaded() {
    log(('A receiver is finished writing files from Upstream `' + self.fieldName + '`.').grey);
    log('(this doesn\'t necessarily mean any files were actually written...)'.grey);

    cb(null, self.serializeFiles());
  });

  // Write stream encountered a fatal error and had to quit early!
  // (some of the files may still have been successfully written, though)
  receiver__.once('error', function unableToUpload(err) {
    log(('A receiver handling Upstream `' + self.fieldName + '` encountered a write error :' + util.inspect(err)).red);

    cb(err, self.serializeFiles());
  });


  // Pipe to the (Writeable) receiver.  Every time the file parser encounters a new file
  // on this stream (i.e. a new file in the same form field), it will call Upstream's
  // writeFile method, which will push the new file stream into Upstream's buffer.  The
  // piping mechanism will then cause "_write" to be called on the Receiver, so it can
  // handle the file in whatever way it sees fit (saving to disk, streaming to S3, etc.)
  self.pipe(receiver__);


  // // ??????????????????????????????????????????????????????????????????????????????????????????
  // // ??????????????????????????????????????????????????????????????????????????????????????????
  // // ??????????????????????????????????????????????????????????????????????????????????????????
  //
  // // Call saveAs-Function on the receiver
  // receiver__.saveAs(receiver__.filename, function generateNameFinish(err) {
  //   if (err) {
  //     return cb(err);
  //   }

  //   // Pipe to the (Writeable) receiver.  Every time the file parser encounters a new file
  //   // on this stream (i.e. a new file in the same form field), it will call Upstream's
  //   // writeFile method, which will push the new file stream into Upstream's buffer.  The
  //   // piping mechanism will then cause "_write" to be called on the Receiver, so it can
  //   // handle the file in whatever way it sees fit (saving to disk, streaming to S3, etc.)
  //   return self.pipe(receiver__);
  // });
  // // ??????????????????????????????????????????????????????????????????????????????????????????
  // // ??????????????????????????????????????????????????????????????????????????????????????????
  // // ??????????????????????????????????????????????????????????????????????????????????????????

  // Chainable
  return this;
};
